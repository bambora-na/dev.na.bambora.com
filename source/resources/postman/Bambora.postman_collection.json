{
	"info": {
		"_postman_id": "098dc952-601a-4721-9bdf-07b90625d054",
		"name": "Bambora",
		"description": "Postman collection for Bambora.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8745712"
	},
	"item": [
		{
			"name": "Batch Payment",
			"item": [
				{
					"name": "EFT Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"postman.clearEnvironmentVariable(\"id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"batchId\", jsonData.batch_id);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"id\", Math.round(Math.random() * 8888) + 1111);",
									"",
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"batch_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=CHEESE"
							},
							{
								"key": "Authorization",
								"value": "Passcode  {{passcode_encoded}}"
							},
							{
								"key": "FileType",
								"value": "STD"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--CHEESE\r\nContent-Disposition: form-data; name=\"criteria\"\r\nContent-Type: application/json\r\n\r\n{\r\n    \"process_now\": 1\r\n}\r\n--CHEESE\r\nContent-Disposition: form-data; name=\"testdata\"; filename=\"testdata.csv\"\r\nContent-Type: text/plain\r\n\r\nE,C,001,99001,09400313371,10000,1000070001,General Motors\r\nE,C,002,99002,09400313372,20000,1000070002,Paul Randall\r\nE,C,003,99003,09400313373,30000,1000070003,Alex Anderson\r\n--CHEESE--\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/batchpayments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"batchpayments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACH Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"postman.clearEnvironmentVariable(\"id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"batchId\", jsonData.batch_id);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"id\", Math.round(Math.random() * 8888) + 1111);",
									"",
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"batch_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=CHEESE"
							},
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "FileType",
								"value": "STD"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--CHEESE\r\nContent-Disposition: form-data; name=\"criteria\"\r\nContent-Type: application/json\r\n\r\n{\r\n    \"process_now\": 1\r\n}\r\n--CHEESE\r\nContent-Disposition: form-data; name=\"testdata\"; filename=\"in-future-{{id}}.txt\"\r\nContent-Type: text/plain\r\n\r\nA,C,256072691,2025621034,PS,10000,0,Patrick Star\r\nA,C,256072691,2025463767,PC,20000,0,Spongebob Squarepants\r\nA,C,021200339,381036789124,PC,30000,0,Krusty Krab\r\n--CHEESE--\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/batchpayments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"batchpayments"
							]
						}
					},
					"response": []
				},
				{
					"name": "SEPA Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"postman.clearEnvironmentVariable(\"id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"batchId\", jsonData.batch_id);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"id\", Math.round(Math.random() * 8888) + 1111);",
									"",
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"batch_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=CHEESE"
							},
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "FileType",
								"value": "STD"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--CHEESE\r\nContent-Disposition: form-data; name=\"criteria\"\r\nContent-Type: application/json\r\n\r\n{\r\n    \"process_now\": 1\r\n}\r\n--CHEESE\r\nContent-Disposition: form-data; name=\"testdata\"; filename=\"in-future-{{id}}.txt\"\r\nContent-Type: text/plain\r\n\r\nSEPA,C,bankidcode,IBAN,bankname,GB,10000,sepa-credit-1,Bill,GB,custcode,bankdescriptor\r\nSEPA,C,bankidcode,IBAN,bankname,GB,20000,sepa-credit-2,Steve,CA,custcode,bankdescriptor\r\nSEPA,C,bankidcode,IBAN,bankname,CA,30000,sepa-credit-3,Ryan,CA,custcode,bankdescriptor\r\n--CHEESE--\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/batchpayments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"batchpayments"
							]
						}
					},
					"response": []
				},
				{
					"name": "BACS Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"postman.clearEnvironmentVariable(\"id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"batchId\", jsonData.batch_id);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"id\", Math.round(Math.random() * 8888) + 1111);",
									"",
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"batch_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=CHEESE"
							},
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "FileType",
								"value": "STD"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--CHEESE\r\nContent-Disposition: form-data; name=\"criteria\"\r\nContent-Type: application/json\r\n\r\n{\r\n    \"process_now\": 1\r\n}\r\n--CHEESE\r\nContent-Disposition: form-data; name=\"testdata\"; filename=\"in-future-{{id}}.txt\"\r\nContent-Type: text/plain\r\n\r\nBACS,C,sortcd,acctNbr1,GB,10000,bacs-credit-1,Bill,GB,custcode,bankdescriptor\r\nBACS,C,sortcd,acctNbr3,CA,20000,bacs-credit-2,Claude,CA,custcode,bankdescriptor\r\nBACS,C,sortcd,acctNbr3,CA,30000,bacs-credit-3,Harry,CA,custcode,bankdescriptor\r\n--CHEESE--\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/batchpayments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"batchpayments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Credit Card Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"postman.clearEnvironmentVariable(\"id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"batchId\", jsonData.batch_id);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"id\", Math.round(Math.random() * 8888) + 1111);",
									"",
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"batch_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=CHEESE"
							},
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "FileType",
								"value": "STD"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--CHEESE\r\nContent-Disposition: form-data; name=\"criteria\"\r\nContent-Type: application/json\r\n\r\n{\r\n    \"process_date\": 20231215\r\n}\r\n--CHEESE\r\nContent-Disposition: form-data; name=\"testdata\"; filename=\"in-future-{{id}}.txt\"\r\nContent-Type: text/plain\r\n\r\nC,P,,4030000010001234,0619,1000,reference_01,Daffy Duck,daffy@example.com,0\r\nC,P,,4030000010001234,0520,2000,reference_01,Bugs Bunny,bugs@example.com,0\r\nC,P,,4030000010001234,0421,3000,reference_01,Porky Pig,porky@example.com,0\r\n--CHEESE--\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/batchpayments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"batchpayments"
							]
						}
					},
					"response": []
				},
				{
					"name": "EFT Batch (profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"postman.clearEnvironmentVariable(\"id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"batchId\", jsonData.batch_id);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"id\", Math.round(Math.random() * 8888) + 1111);",
									"",
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"batch_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data; boundary=CHEESE"
							},
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "FileType",
								"value": "STD"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--CHEESE\r\nContent-Disposition: form-data; name=\"criteria\"\r\nContent-Type: application/json\r\n\r\n{\r\n    \"process_now\": 1\r\n}\r\n--CHEESE\r\nContent-Disposition: form-data; name=\"testdata\"; filename=\"in-future-{{id}}.txt\"\r\nContent-Type: text/plain\r\n\r\nE,C,,,,10000,,,{{payment_passcode}},dynamic descriptor\r\n--CHEESE--\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/batchpayments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"batchpayments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch Payment Report",
			"item": [
				{
					"name": "Generate Report - EFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>2.0</rptVersion>\r\n<serviceName>BatchPaymentsEFT</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>JSON</rptFormat>\r\n<rptFilterBy1>batch_id</rptFilterBy1>\r\n<rptOperationType1>EQ</rptOperationType1>\r\n<rptFilterValue1>{{batchId}}</rptFilterValue1>\r\n</request>"
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/reporting/report.aspx",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Report - BatchSettlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>2.0</rptVersion>\r\n<serviceName>BatchSettlement</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>JSON</rptFormat>\r\n<rptFilterBy1>batch_id</rptFilterBy1>\r\n<rptOperationType1>EQ</rptOperationType1>\r\n<rptFilterValue1>{{batchId}}</rptFilterValue1>\r\n</request>"
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/reporting/report.aspx",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Report - EFT (XML)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>2.0</rptVersion>\r\n<serviceName>BatchPaymentsEFT</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<sessionSource>external</sessionSource>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>XML</rptFormat>\r\n<rptFromDateTime>2012-03-03 00:00:00</rptFromDateTime>\r\n<rptToDateTime>2019-03-03 23:59:59</rptToDateTime>\r\n<rptFilterBy1>batch_id</rptFilterBy1>\r\n<rptOperationType1>EQ</rptOperationType1>\r\n<rptFilterValue1>{{batchId}}</rptFilterValue1>\r\n</request>"
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/reporting/report.aspx",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Report - BACS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>2.0</rptVersion>\r\n<serviceName>BatchPaymentsBACS</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<sessionSource>external</sessionSource>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>CSV</rptFormat>\r\n<rptFromDateTime>2012-03-03 00:00:00</rptFromDateTime>\r\n<rptToDateTime>2019-03-03 23:59:59</rptToDateTime>\r\n<rptFilterBy1>batch_id</rptFilterBy1>\r\n<rptOperationType1>EQ</rptOperationType1>\r\n<rptFilterValue1>{{batchId}}</rptFilterValue1>\r\n</request>"
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/reporting/report.aspx",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Report - SEPA",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>2.0</rptVersion>\r\n<serviceName>BatchPaymentsSEPA</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<sessionSource>external</sessionSource>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>CSV</rptFormat>\r\n<rptFromDateTime>2012-03-03 00:00:00</rptFromDateTime>\r\n<rptToDateTime>2019-03-03 23:59:59</rptToDateTime>\r\n<rptFilterBy1>batch_id</rptFilterBy1>\r\n<rptOperationType1>EQ</rptOperationType1>\r\n<rptFilterValue1>{{batchId}}</rptFilterValue1>\r\n</request>"
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/reporting/report.aspx",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Report - ACH",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>2.0</rptVersion>\r\n<serviceName>BatchPaymentsACH</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<sessionSource>external</sessionSource>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>JSON</rptFormat>\r\n<rptFromDateTime>2012-03-03 00:00:00</rptFromDateTime>\r\n<rptToDateTime>2019-03-03 23:59:59</rptToDateTime>\r\n<rptFilterBy1>batch_id</rptFilterBy1>\r\n<rptOperationType1>EQ</rptOperationType1>\r\n<rptFilterValue1>{{batchId}}</rptFilterValue1>\r\n</request>"
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/reporting/report.aspx",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Boarding",
			"item": [
				{
					"name": "sepa-eur: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/sepa-eur/applications?state=in_progress",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"sepa-eur",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_progress"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sepa-eur: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pricing_id\": \"ABC123\",\r\n  \"applicant\": {\r\n    \"phone_number\": \"222-222-2222\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Name\",\r\n    \"annual_sales\": 100000,\r\n    \"entity_type\": \"public_limited\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"legal_name\": \"Legal Name\",\r\n    \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"registration_number\": \"123456789\",\r\n    \"dba_name\": \"string\",\r\n    \"batch_settings\": {\r\n      \"frequency\": \"daily\",\r\n      \"average_amount\": 0,\r\n      \"maximum_amount\": 0\r\n    },\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"directors\": [\r\n      {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\",\r\n        \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"percentage\": 100,\r\n        \"address\": {\r\n          \"address_line1\": \"123 Main Street\",\r\n          \"address_line2\": \"444\",\r\n          \"city\": \"Victoria\",\r\n          \"region\": \"BC\",\r\n          \"country\": \"CA\",\r\n          \"postal_code\": \"V1H W2Y\"\r\n        }\r\n      }\r\n    ],\r\n    \"bank_account\": {\r\n      \"owner_name\": \"John Doe\",\r\n      \"bank_name\": \"The Bank\",\r\n      \"swift_code\": \"ACMTCAMM\",\r\n      \"iban\": \"GB29 RBOS 6016 1331 9268 19\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/sepa-eur/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"sepa-eur",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "sepa-eur: Upload supporting documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \t\"name\": \"copy_id\",\r\n  \t\"type\": \"jpg\",\r\n  \t\"notes\": \"string\",\r\n  \t\"base64\": \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAADQElEQVR42q2VSU9TURiGuzD6FxnFMJdJMEjAkADGGpQQN4isMIgbbCHMtEC7YkMCZR7KTJlbhstQtp/3+ZKDNw3EBW3y5vbcc87zfsM5rcvr9b70+XyN4+Pj0VAoZKVCsGDa7Feu3t7e5vn5ebm5uZFEIiG3t7fPEgxYMG32V9fExMQZE5Zlyfn5eUp0dXWlZjY77rJTSuAYj8dTplgsJjBhu4LBoEX0Z2dnTPxXZt3FxYVG63znFEzYrsnJSevy8lJOT0+dYhHPZAGjBPo8PDyUk5OTR9fBhK0GRMNCo+PjY43w7u4OIx2buevra5mZmZHPHo/86emh1mTiXIPY/8+Auh0dHSGdjB4ciM/rlZGRER2bEhJVJBKR99XVkpmeLvX19RLw+02ZDEMFEzanyCKlAxuKSDtmT/b390thQYE0NjTIwMCARKNRbdzPzk55k5MjbysqJC83V7KzsqSvrw9zjNivHJiw1YAoAaD9/X1NeXFxUUrcbsnMyJD8vDz50twsoWBQPtTVSXFRkZSXlUlFebkU5OdrRpsbG7K1tYXUAKYa2LfOwnV3d9dIU9ywN3R0dEhpSYm4i4vJRr+XlZYCd0rnPzY1iX1zZW9vT+Ah2GqA487OjlOaRTAUYjOZAMJAn8ky5qOjozRXqwBTDQKBgMULUnOKTFZXV+V3dzcmT8KZ40nz+Zkg8s3NTc0EthoA4yWLeDLe3t6mVIy1/kWFhY8a0KNfXV3Ch8zX19cfGGrg9/stO2JqTsQcLa64LC8vy9ramkxNTUlLS4tprGmujtPT0sTj8RC5nqKVlRWCVBOYsNUAR2CYTE9Py4/2dqmrrZWqykotgduG0VzKBJij+To7W763tellvL+/B06AcFQwHwxwZYEzgsHBQfnW2irvqqpoIsdR4TU1NdJuBxCenRU+NJUjvbS0pPudHDUYGxuzcGSBEeXhTtAoExUbzBmnJERNlOFw2Bg4pXtgqwEQFjnFHwZGNA4zwAhTMpybmzPwRwXzwQDQwsJCsjBBwJLFe9Y8KZhqYF+OBCmxKZWCCds1PDwcw9GknArBggmbP/1PnHsmTFmeIxiwYMLG4IWt2qGhoYidkpUKwYIJ+y90rW5HwS+CtQAAAABJRU5ErkJggg==\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/sepa-eur/applications/{{applicationId}}/documents",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"sepa-eur",
								"applications",
								"{{applicationId}}",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "sepa-eur: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/sepa-eur/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"sepa-eur",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "sepa-eur: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/sepa-eur/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"sepa-eur",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "bacs-gbp: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/bacs-gbp/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"bacs-gbp",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "bacs-gbp: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pricing_id\": \"ABC123\",\r\n  \"applicant\": {\r\n    \"phone_number\": \"222-222-2222\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Name\",\r\n    \"annual_sales\": 100000,\r\n    \"entity_type\": \"public_limited\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"legal_name\": \"Legal Name\",\r\n    \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"registration_number\": \"123456789\",\r\n    \"dba_name\": \"string\",\r\n    \"batch_settings\": {\r\n      \"frequency\": \"daily\",\r\n      \"average_amount\": 0,\r\n      \"maximum_amount\": 0\r\n    },\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"directors\": [\r\n      {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\",\r\n        \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"percentage\": 100,\r\n        \"address\": {\r\n          \"address_line1\": \"123 Main Street\",\r\n          \"address_line2\": \"444\",\r\n          \"city\": \"Victoria\",\r\n          \"region\": \"BC\",\r\n          \"country\": \"CA\",\r\n          \"postal_code\": \"V1H W2Y\"\r\n        }\r\n      }\r\n    ],\r\n    \"bank_account\": {\r\n      \"owner_name\": \"John Doe\",\r\n      \"bank_name\": \"The Bank\",\r\n      \"sort_code\": \"90-00-17\",\r\n      \"account_number\": \"31926819\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/bacs-gbp/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"bacs-gbp",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "bacs-gbp: Upload supporting documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \t\"name\": \"copy_id\",\r\n  \t\"type\": \"jpg\",\r\n  \t\"notes\": \"string\",\r\n  \t\"base64\": \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAADQElEQVR42q2VSU9TURiGuzD6FxnFMJdJMEjAkADGGpQQN4isMIgbbCHMtEC7YkMCZR7KTJlbhstQtp/3+ZKDNw3EBW3y5vbcc87zfsM5rcvr9b70+XyN4+Pj0VAoZKVCsGDa7Feu3t7e5vn5ebm5uZFEIiG3t7fPEgxYMG32V9fExMQZE5Zlyfn5eUp0dXWlZjY77rJTSuAYj8dTplgsJjBhu4LBoEX0Z2dnTPxXZt3FxYVG63znFEzYrsnJSevy8lJOT0+dYhHPZAGjBPo8PDyUk5OTR9fBhK0GRMNCo+PjY43w7u4OIx2buevra5mZmZHPHo/86emh1mTiXIPY/8+Auh0dHSGdjB4ciM/rlZGRER2bEhJVJBKR99XVkpmeLvX19RLw+02ZDEMFEzanyCKlAxuKSDtmT/b390thQYE0NjTIwMCARKNRbdzPzk55k5MjbysqJC83V7KzsqSvrw9zjNivHJiw1YAoAaD9/X1NeXFxUUrcbsnMyJD8vDz50twsoWBQPtTVSXFRkZSXlUlFebkU5OdrRpsbG7K1tYXUAKYa2LfOwnV3d9dIU9ywN3R0dEhpSYm4i4vJRr+XlZYCd0rnPzY1iX1zZW9vT+Ah2GqA487OjlOaRTAUYjOZAMJAn8ky5qOjozRXqwBTDQKBgMULUnOKTFZXV+V3dzcmT8KZ40nz+Zkg8s3NTc0EthoA4yWLeDLe3t6mVIy1/kWFhY8a0KNfXV3Ch8zX19cfGGrg9/stO2JqTsQcLa64LC8vy9ramkxNTUlLS4tprGmujtPT0sTj8RC5nqKVlRWCVBOYsNUAR2CYTE9Py4/2dqmrrZWqykotgduG0VzKBJij+To7W763tellvL+/B06AcFQwHwxwZYEzgsHBQfnW2irvqqpoIsdR4TU1NdJuBxCenRU+NJUjvbS0pPudHDUYGxuzcGSBEeXhTtAoExUbzBmnJERNlOFw2Bg4pXtgqwEQFjnFHwZGNA4zwAhTMpybmzPwRwXzwQDQwsJCsjBBwJLFe9Y8KZhqYF+OBCmxKZWCCds1PDwcw9GknArBggmbP/1PnHsmTFmeIxiwYMLG4IWt2qGhoYidkpUKwYIJ+y90rW5HwS+CtQAAAABJRU5ErkJggg==\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/bacs-gbp/applications/{{applicationId}}/documents",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"bacs-gbp",
								"applications",
								"{{applicationId}}",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "bacs-gbp: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/bacs-gbp/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"bacs-gbp",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "bacs-gbp: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/bacs-gbp/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"bacs-gbp",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ach-usd: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/ach-usd/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"ach-usd",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ach-usd: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pricing_id\": \"ABC123\",\r\n  \"applicant\": {\r\n    \"phone_number\": \"222-222-2222\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Name\",\r\n    \"annual_sales\": 100000,\r\n    \"entity_type\": \"sole_proprietor\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"dba_name\": \"string\",\r\n    \"batch_settings\": {\r\n      \"frequency\": \"daily\",\r\n      \"average_amount\": 0,\r\n      \"maximum_amount\": 0\r\n    },\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"directors\": [\r\n      {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\",\r\n        \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"percentage\": 100,\r\n        \"address\": {\r\n          \"address_line1\": \"123 Main Street\",\r\n          \"address_line2\": \"444\",\r\n          \"city\": \"Victoria\",\r\n          \"region\": \"BC\",\r\n          \"country\": \"CA\",\r\n          \"postal_code\": \"V1H W2Y\"\r\n        }\r\n      }\r\n    ],\r\n    \"bank_account\": {\r\n      \"owner_name\": \"John Doe\",\r\n      \"routing_number\": \"011103093\",\r\n      \"account_number\": \"0532013000\"\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/ach-usd/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"ach-usd",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "ach-usd: Upload supporting documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \t\"name\": \"copy_id\",\r\n  \t\"type\": \"jpg\",\r\n  \t\"notes\": \"string\",\r\n  \t\"base64\": \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAADQElEQVR42q2VSU9TURiGuzD6FxnFMJdJMEjAkADGGpQQN4isMIgbbCHMtEC7YkMCZR7KTJlbhstQtp/3+ZKDNw3EBW3y5vbcc87zfsM5rcvr9b70+XyN4+Pj0VAoZKVCsGDa7Feu3t7e5vn5ebm5uZFEIiG3t7fPEgxYMG32V9fExMQZE5Zlyfn5eUp0dXWlZjY77rJTSuAYj8dTplgsJjBhu4LBoEX0Z2dnTPxXZt3FxYVG63znFEzYrsnJSevy8lJOT0+dYhHPZAGjBPo8PDyUk5OTR9fBhK0GRMNCo+PjY43w7u4OIx2buevra5mZmZHPHo/86emh1mTiXIPY/8+Auh0dHSGdjB4ciM/rlZGRER2bEhJVJBKR99XVkpmeLvX19RLw+02ZDEMFEzanyCKlAxuKSDtmT/b390thQYE0NjTIwMCARKNRbdzPzk55k5MjbysqJC83V7KzsqSvrw9zjNivHJiw1YAoAaD9/X1NeXFxUUrcbsnMyJD8vDz50twsoWBQPtTVSXFRkZSXlUlFebkU5OdrRpsbG7K1tYXUAKYa2LfOwnV3d9dIU9ywN3R0dEhpSYm4i4vJRr+XlZYCd0rnPzY1iX1zZW9vT+Ah2GqA487OjlOaRTAUYjOZAMJAn8ky5qOjozRXqwBTDQKBgMULUnOKTFZXV+V3dzcmT8KZ40nz+Zkg8s3NTc0EthoA4yWLeDLe3t6mVIy1/kWFhY8a0KNfXV3Ch8zX19cfGGrg9/stO2JqTsQcLa64LC8vy9ramkxNTUlLS4tprGmujtPT0sTj8RC5nqKVlRWCVBOYsNUAR2CYTE9Py4/2dqmrrZWqykotgduG0VzKBJij+To7W763tellvL+/B06AcFQwHwxwZYEzgsHBQfnW2irvqqpoIsdR4TU1NdJuBxCenRU+NJUjvbS0pPudHDUYGxuzcGSBEeXhTtAoExUbzBmnJERNlOFw2Bg4pXtgqwEQFjnFHwZGNA4zwAhTMpybmzPwRwXzwQDQwsJCsjBBwJLFe9Y8KZhqYF+OBCmxKZWCCds1PDwcw9GknArBggmbP/1PnHsmTFmeIxiwYMLG4IWt2qGhoYidkpUKwYIJ+y90rW5HwS+CtQAAAABJRU5ErkJggg==\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/ach-usd/applications/{{applicationId}}/documents",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"ach-usd",
								"applications",
								"{{applicationId}}",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "ach-usd: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/ach-usd/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"ach-usd",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ach-usd: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/ach-usd/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"ach-usd",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eft-cad: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/eft-cad/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"eft-cad",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "eft-cad: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pricing_id\": \"string\",\r\n  \"applicant\": {\r\n    \"phone_number\": \"222-222-2222\",\r\n    \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Name\",\r\n    \"annual_sales\": 100000,\r\n    \"entity_type\": \"sole_proprietor\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"services_description\": \"services description...\",\r\n    \"dba_name\": \"string\",\r\n    \"batch_settings\": {\r\n      \"frequency\": \"daily\",\r\n      \"average_amount\": 0,\r\n      \"maximum_amount\": 0\r\n    },\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"directors\": [\r\n      {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\",\r\n        \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"address\": {\r\n          \"address_line1\": \"123 Main Street\",\r\n          \"address_line2\": \"444\",\r\n          \"city\": \"Victoria\",\r\n          \"region\": \"BC\",\r\n          \"country\": \"CA\",\r\n          \"postal_code\": \"V1H W2Y\"\r\n        }\r\n      }\r\n    ],\r\n    \"bank_account\": {\r\n      \"currency\": \"CAD\",\r\n      \"owner_name\": \"John Doe\",\r\n      \"transit_number\": \"12345\",\r\n      \"institution_number\": \"567\",\r\n      \"account_number\": \"123456789123\"\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/eft-cad/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"eft-cad",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "eft-cad: Upload supporting documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \t\"name\": \"copy_id\",\r\n  \t\"type\": \"jpg\",\r\n  \t\"notes\": \"string\",\r\n  \t\"base64\": \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAADQElEQVR42q2VSU9TURiGuzD6FxnFMJdJMEjAkADGGpQQN4isMIgbbCHMtEC7YkMCZR7KTJlbhstQtp/3+ZKDNw3EBW3y5vbcc87zfsM5rcvr9b70+XyN4+Pj0VAoZKVCsGDa7Feu3t7e5vn5ebm5uZFEIiG3t7fPEgxYMG32V9fExMQZE5Zlyfn5eUp0dXWlZjY77rJTSuAYj8dTplgsJjBhu4LBoEX0Z2dnTPxXZt3FxYVG63znFEzYrsnJSevy8lJOT0+dYhHPZAGjBPo8PDyUk5OTR9fBhK0GRMNCo+PjY43w7u4OIx2buevra5mZmZHPHo/86emh1mTiXIPY/8+Auh0dHSGdjB4ciM/rlZGRER2bEhJVJBKR99XVkpmeLvX19RLw+02ZDEMFEzanyCKlAxuKSDtmT/b390thQYE0NjTIwMCARKNRbdzPzk55k5MjbysqJC83V7KzsqSvrw9zjNivHJiw1YAoAaD9/X1NeXFxUUrcbsnMyJD8vDz50twsoWBQPtTVSXFRkZSXlUlFebkU5OdrRpsbG7K1tYXUAKYa2LfOwnV3d9dIU9ywN3R0dEhpSYm4i4vJRr+XlZYCd0rnPzY1iX1zZW9vT+Ah2GqA487OjlOaRTAUYjOZAMJAn8ky5qOjozRXqwBTDQKBgMULUnOKTFZXV+V3dzcmT8KZ40nz+Zkg8s3NTc0EthoA4yWLeDLe3t6mVIy1/kWFhY8a0KNfXV3Ch8zX19cfGGrg9/stO2JqTsQcLa64LC8vy9ramkxNTUlLS4tprGmujtPT0sTj8RC5nqKVlRWCVBOYsNUAR2CYTE9Py4/2dqmrrZWqykotgduG0VzKBJij+To7W763tellvL+/B06AcFQwHwxwZYEzgsHBQfnW2irvqqpoIsdR4TU1NdJuBxCenRU+NJUjvbS0pPudHDUYGxuzcGSBEeXhTtAoExUbzBmnJERNlOFw2Bg4pXtgqwEQFjnFHwZGNA4zwAhTMpybmzPwRwXzwQDQwsJCsjBBwJLFe9Y8KZhqYF+OBCmxKZWCCds1PDwcw9GknArBggmbP/1PnHsmTFmeIxiwYMLG4IWt2qGhoYidkpUKwYIJ+y90rW5HwS+CtQAAAABJRU5ErkJggg==\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/eft-cad/applications/{{applicationId}}/documents",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"eft-cad",
								"applications",
								"{{applicationId}}",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "eft-cad: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/eft-cad/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"eft-cad",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "etf-cad: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/eft-cad/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"eft-cad",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-cad: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-cad/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-cad",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-cad: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pricing_id\":\"ABC123\",\r\n  \"applicant\":{\r\n    \"phone_number\":\"222-222-2222\",\r\n    \"date_of_birth\":\"2013-03-25T22:04:10.04399Z\",\r\n    \"email\":\"user@example.com\",\r\n    \"address\":{\r\n      \"address_line1\":\"123 Main Street\",\r\n      \"address_line2\":\"444\",\r\n      \"city\":\"Victoria\",\r\n      \"region\":\"BC\",\r\n      \"country\":\"CA\",\r\n      \"postal_code\":\"V1H W2Y\"\r\n    },\r\n    \"agreement\":{\r\n      \"name\":\"Terms and Conditions PSP.pdf\",\r\n      \"version\":\"1.0\",\r\n      \"timestamp\":\"2013-03-25T22:04:10.04399Z\"\r\n    }\r\n  },\r\n  \"business\":{\r\n    \"company_name\":\"Name\",\r\n    \"annual_sales\":100000,\r\n    \"merchant_category\":\"8641\",\r\n    \"entity_type\":\"partnership\",\r\n    \"website_url\":\"http://example.com\",\r\n    \"start_date\":\"2013-03-25T22:04:10.04399Z\",\r\n    \"business_number\":\"2342342545345\",\r\n    \"services_description\":\"clothes, jewellery, shoes, accessories\",\r\n    \"bank_account\":{\r\n      \"owner_name\":\"John Doe\",\r\n      \"transit_number\":\"69877\",\r\n      \"institution_number\":\"345\",\r\n      \"account_number\":\"3453\"\r\n    },\r\n    \"address\":{\r\n      \"address_line1\":\"123 Main Street\",\r\n      \"address_line2\":\"444\",\r\n      \"city\":\"Victoria\",\r\n      \"region\":\"BC\",\r\n      \"country\":\"CA\",\r\n      \"postal_code\":\"V1H W2Y\"\r\n    },\"owners\":[\r\n      {\r\n        \"first_name\":\"John\",\r\n        \"last_name\":\"Doe\",\r\n        \"date_of_birth\":\"2013-03-25T22:04:10.04399Z\",\r\n        \"address\":{\r\n          \"address_line1\":\"123 Main Street\",\r\n          \"address_line2\":\"444\",\r\n          \"city\":\"Victoria\",\r\n          \"region\":\"BC\",\r\n          \"country\":\"CA\",\r\n          \"postal_code\":\"V1H W2Y\"\r\n        }\r\n      },\r\n      {\r\n        \"first_name\":\"Jane\",\r\n        \"last_name\":\"Doe\",\r\n        \"date_of_birth\":\"2013-03-25T22:04:10.04399Z\",\r\n        \"address\":{\r\n          \"address_line1\":\"123 Main Street\",\r\n          \"address_line2\":\"444\",\r\n          \"city\":\"Victoria\",\r\n          \"region\":\"BC\",\r\n          \"country\":\"CA\",\r\n          \"postal_code\":\"V1H W2Y\"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-cad/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-cad",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-cad: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-cad/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-cad",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-cad: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-cad/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-cad",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-usd: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-usd/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-usd",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-usd: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pricing_id\": \"string\",\r\n  \"applicant\": {\r\n    \"social_security_number\": \"037-46-1234\",\r\n    \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"citizenship\": \"CA\",\r\n    \"phone_number\": \"2222222\",\r\n    \"position\": \"owner\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main St\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Name\",\r\n    \"legal_name\": \"Legal Name\",\r\n    \"annual_sales\": 10000,\r\n    \"merchant_category\": \"7997\",\r\n    \"services_description\": \"services description...\",\r\n    \"federal_tax_id\": \"123456789\",\r\n    \"tin_type\": \"social_security\",\r\n    \"entity_type\": \"sole_proprietor\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"start_date\": \"2013-03-25T22:04:10.04399Z\",\r\n    \"average_amount\": 0,\r\n    \"average_delivery\": \"07\",\r\n    \"seasonal_sales\": \"1\",\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"owners\": [\r\n      {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\",\r\n        \"date_of_birth\": \"2013-03-25T22:04:10.04399Z\",\r\n        \"social_security_number\": \"037461234\",\r\n        \"phone_number\": \"2222222222\",\r\n        \"email\": \"jdoe@example.com\",\r\n        \"citizenship\": \"CA\",\r\n        \"percentage\": 100,\r\n        \"address\": {\r\n          \"address_line1\": \"123 Main St\",\r\n          \"address_line2\": \"444\",\r\n          \"city\": \"Victoria\",\r\n          \"region\": \"BC\",\r\n          \"country\": \"CA\",\r\n          \"postal_code\": \"V1H W2Y\"\r\n        }\r\n      }\r\n    ],\r\n    \"bank_account\": {\r\n      \"owner_name\": \"John Doe\",\r\n      \"routing_number\": \"123456789\",\r\n      \"account_number\": \"012345678901\"\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-usd/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-usd",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-usd: Upload supporting documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \t\"name\": \"id_applicant\",\r\n  \t\"type\": \"jpg\",\r\n  \t\"notes\": \"string\",\r\n  \t\"base64\": \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAADQElEQVR42q2VSU9TURiGuzD6FxnFMJdJMEjAkADGGpQQN4isMIgbbCHMtEC7YkMCZR7KTJlbhstQtp/3+ZKDNw3EBW3y5vbcc87zfsM5rcvr9b70+XyN4+Pj0VAoZKVCsGDa7Feu3t7e5vn5ebm5uZFEIiG3t7fPEgxYMG32V9fExMQZE5Zlyfn5eUp0dXWlZjY77rJTSuAYj8dTplgsJjBhu4LBoEX0Z2dnTPxXZt3FxYVG63znFEzYrsnJSevy8lJOT0+dYhHPZAGjBPo8PDyUk5OTR9fBhK0GRMNCo+PjY43w7u4OIx2buevra5mZmZHPHo/86emh1mTiXIPY/8+Auh0dHSGdjB4ciM/rlZGRER2bEhJVJBKR99XVkpmeLvX19RLw+02ZDEMFEzanyCKlAxuKSDtmT/b390thQYE0NjTIwMCARKNRbdzPzk55k5MjbysqJC83V7KzsqSvrw9zjNivHJiw1YAoAaD9/X1NeXFxUUrcbsnMyJD8vDz50twsoWBQPtTVSXFRkZSXlUlFebkU5OdrRpsbG7K1tYXUAKYa2LfOwnV3d9dIU9ywN3R0dEhpSYm4i4vJRr+XlZYCd0rnPzY1iX1zZW9vT+Ah2GqA487OjlOaRTAUYjOZAMJAn8ky5qOjozRXqwBTDQKBgMULUnOKTFZXV+V3dzcmT8KZ40nz+Zkg8s3NTc0EthoA4yWLeDLe3t6mVIy1/kWFhY8a0KNfXV3Ch8zX19cfGGrg9/stO2JqTsQcLa64LC8vy9ramkxNTUlLS4tprGmujtPT0sTj8RC5nqKVlRWCVBOYsNUAR2CYTE9Py4/2dqmrrZWqykotgduG0VzKBJij+To7W763tellvL+/B06AcFQwHwxwZYEzgsHBQfnW2irvqqpoIsdR4TU1NdJuBxCenRU+NJUjvbS0pPudHDUYGxuzcGSBEeXhTtAoExUbzBmnJERNlOFw2Bg4pXtgqwEQFjnFHwZGNA4zwAhTMpybmzPwRwXzwQDQwsJCsjBBwJLFe9Y8KZhqYF+OBCmxKZWCCds1PDwcw9GknArBggmbP/1PnHsmTFmeIxiwYMLG4IWt2qGhoYidkpUKwYIJ+y90rW5HwS+CtQAAAABJRU5ErkJggg==\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-usd/applications/{{applicationId}}/documents",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-usd",
								"applications",
								"{{applicationId}}",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-usd: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-usd/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-usd",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "psp-usd: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/psp-usd/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"psp-usd",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-cdn: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-cdn/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-cdn",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-cdn: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"phone_number\": \"222-222-2222\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Company Name\",\r\n    \"merchant_category\": \"5813\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"bank_account\": {\r\n      \"currency\": \"CAD\",\r\n      \"owner_name\": \"John Doe\",\r\n      \"transit_number\": \"12345\",\r\n      \"institution_number\": \"567\",\r\n      \"account_number\": \"123456789123\"\r\n    }\r\n  },\r\n  \"pricing_id\": \"123456\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-cdn/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-cdn",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-cdn: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-cdn/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-cdn",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-cdn: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-cdn/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-cdn",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-usa: Search applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-usa/applications?state=in_review",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-usa",
								"applications"
							],
							"query": [
								{
									"key": "state",
									"value": "in_review"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-usa: Create partial application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if(responseCode.code === 201) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"applicationId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"phone_number\": \"222-222-2222\",\r\n    \"agreement\": {\r\n      \"name\": \"Terms and Conditions PSP.pdf\",\r\n      \"version\": \"1.0\",\r\n      \"personal_guarantee_accepted\": true,\r\n      \"timestamp\": \"2013-03-25T22:04:10.04399Z\"\r\n    },\r\n    \"email\": \"user@example.com\"\r\n  },\r\n  \"business\": {\r\n    \"company_name\": \"Company Name\",\r\n    \"merchant_category\": \"5813\",\r\n    \"website_url\": \"http://example.com\",\r\n    \"address\": {\r\n      \"address_line1\": \"123 Main Street\",\r\n      \"address_line2\": \"444\",\r\n      \"city\": \"Victoria\",\r\n      \"region\": \"BC\",\r\n      \"country\": \"CA\",\r\n      \"postal_code\": \"V1H W2Y\"\r\n    },\r\n    \"bank_account\": {\r\n      \"owner_name\": \"John Doe\",\r\n      \"account_number\": \"123456789123\",\r\n      \"routing_number\": \"123456789\"\r\n    }\r\n  },\r\n  \"pricing_id\": \"123456\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-usa/applications",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-usa",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-usa: Update application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant\": {\r\n    \"first_name\": \"First\",\r\n    \"last_name\": \"Last\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-usa/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-usa",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "gw-usa: Read application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token {{onboarding_token}}"
							},
							{
								"key": "X-API-Version",
								"value": "2016-08-18"
							}
						],
						"url": {
							"raw": "{{onboarding_url}}/v1/boarding/workflows/gw-usa/applications/{{applicationId}}",
							"host": [
								"{{onboarding_url}}"
							],
							"path": [
								"v1",
								"boarding",
								"workflows",
								"gw-usa",
								"applications",
								"{{applicationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "Make Payment (raw card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for refund: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 120.45,\r\n    \"payment_method\":\"card\",\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"billing\":{\r\n        \"name\": \"Test User\",\r\n        \"address_line1\": \"1755 W. BROADWAY SUITE 105\",\r\n        \"address_line2\": \"\",\r\n        \"city\": \"Victoria\",\r\n        \"province\": \"BC\",\r\n        \"country\": \"CA\",\r\n        \"postal_code\": \"J0L1T0\",\r\n        \"phone_number\": \"1234567890\",\r\n        \"email_address\": \"tester@test.com\"\r\n    },\r\n    \"card\":{\r\n        \"name\":\"John Doe\",\r\n        \"number\":\"4012000033330026\",\r\n        \"expiry_month\":\"02\",\r\n        \"expiry_year\":\"27\",\r\n        \"cvd\":\"123\",\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    // increment order number to keep unique",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order_number\":{{currentOrderNumber}},\n  \"amount\": 0.01\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments/{{transId}}/returns",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments",
								"{{transId}}",
								"returns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Payment (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for void: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"order_number\":\"{{currentOrderNumber}}\",\r\n    \"amount\": 100.00,\r\n    \"payment_method\":\"token\",\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"billing\":{\r\n        \"name\": \"Test User\",\r\n        \"address_line1\": \"1755 W. BROADWAY SUITE 105\",\r\n        \"address_line2\": \"\",\r\n        \"city\": \"Victoria\",\r\n        \"province\": \"BC\",\r\n        \"country\": \"CA\",\r\n        \"postal_code\": \"J0L1T0\",\r\n        \"phone_number\": \"1234567890\",\r\n        \"email_address\": \"tester@test.com\"\r\n    },\r\n    \"token\": { \r\n        \"name\":\"John Doe\", \r\n        \"code\":\"{{tokenizedCC}}\",\r\n        \"complete\": true,\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\":100.00\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments/{{transId}}/void",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments",
								"{{transId}}",
								"void"
							]
						},
						"description": "Void a transaction. It will cancel that transaction. \n\n*/payments/{transId}/void*"
					},
					"response": []
				},
				{
					"name": "Make Pre-Auth (raw card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    // transaction Id used for Complete Pre-Auth",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id); ",
									"    ",
									"    // increment order num to keep unique",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"order_number\":{{currentOrderNumber}},\r\n     \"amount\":100.00,\r\n     \"payment_method\":\"card\",\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"billing\":{\r\n        \"name\": \"Test User\",\r\n        \"address_line1\": \"1755 W. BROADWAY SUITE 105\",\r\n        \"address_line2\": \"\",\r\n        \"city\": \"Victoria\",\r\n        \"province\": \"BC\",\r\n        \"country\": \"CA\",\r\n        \"postal_code\": \"J0L1T0\",\r\n        \"phone_number\": \"1234567890\",\r\n        \"email_address\": \"tester@test.com\"\r\n    },\r\n    \"card\":{\r\n        \"name\":\"John Doe\",\r\n        \"number\":\"4012000033330026\",\r\n        \"expiry_month\":\"02\",\r\n        \"expiry_year\":\"27\",\r\n        \"cvd\":\"123\",\r\n        \"complete\":false,\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Complete Pre-Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    // increment order number to keep unique",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\":59.33\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments/{{transId}}/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments",
								"{{transId}}",
								"completions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/v1/payments/{{transId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments",
								"{{transId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Payment (profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for refund:",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"order_number\":\"{{currentOrderNumber}}\",\r\n    \"amount\": 123.45,\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"payment_method\":\"payment_profile\",\r\n    \"payment_profile\": { \r\n        \"customer_code\": \"{{profileId}}\", \r\n        \"card_id\": \"{{cardId}}\",\r\n        \"complete\": true,\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Payment (token with partner auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for refund: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"partner_id\"] + \":\" + environment[\"partner_payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Sub-Merchant-Id",
								"value": "{{merchant_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"order_number\":{{currentOrderNumber}},\r\n  \"amount\": 100.00,\r\n  \"payment_method\":\"card\",\r\n  \"card\":{\r\n    \"name\":\"John Doe\",\r\n      \"number\":\"5100000010001004\",\r\n      \"expiry_month\":\"02\",\r\n      \"expiry_year\":\"14\",\r\n       \"cvd\":\"123\"\r\n  },\r\n  \"billing\":{\r\n  \t\"postal_code\": \"v8r1a6\"\r\n  }\r\n  \r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Payment (profile with partner auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for refund: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"partner_id\"] + \":\" + environment[\"partner_payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Sub-Merchant-Id",
								"value": "{{merchant_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"order_number\":{{currentOrderNumber}},\r\n  \"amount\": 100.00,\r\n  \"payment_method\":\"card\",\r\n  \"card\":{\r\n    \"name\":\"John Doe\",\r\n      \"number\":\"5100000010001004\",\r\n      \"expiry_month\":\"02\",\r\n      \"expiry_year\":\"14\",\r\n       \"cvd\":\"123\"\r\n  },\r\n  \"billing\":{\r\n  \t\"postal_code\": \"v8r1a6\"\r\n  }\r\n  \r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Pre Auth (profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for refund:",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"order_number\":\"{{currentOrderNumber}}\",\r\n    \"amount\": 100.00,\r\n    \"payment_method\":\"payment_profile\",\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"billing\":{\r\n        \"name\": \"Test User\",\r\n        \"address_line1\": \"1755 W. BROADWAY SUITE 105\",\r\n        \"address_line2\": \"\",\r\n        \"city\": \"Victoria\",\r\n        \"province\": \"BC\",\r\n        \"country\": \"CA\",\r\n        \"postal_code\": \"J0L1T0\",\r\n        \"phone_number\": \"1234567890\",\r\n        \"email_address\": \"tester@test.com\"\r\n    },\r\n    \"payment_profile\": { \r\n        \"customer_code\": \"{{profileId}}\", \r\n        \"card_id\": \"{{cardId}}\",\r\n        \"complete\": false,\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Pre-Auth (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    // transaction id used for void: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"order_number\":\"{{currentOrderNumber}}\",\r\n    \"amount\": 100.00,\r\n    \"payment_method\":\"token\",\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"billing\":{\r\n        \"name\": \"Test User\",\r\n        \"address_line1\": \"1755 W. BROADWAY SUITE 105\",\r\n        \"address_line2\": \"\",\r\n        \"city\": \"Victoria\",\r\n        \"province\": \"BC\",\r\n        \"country\": \"CA\",\r\n        \"postal_code\": \"J0L1T0\",\r\n        \"phone_number\": \"1234567890\",\r\n        \"email_address\": \"tester@test.com\"\r\n    },\r\n    \"token\": { \r\n        \"name\":\"John Doe\", \r\n        \"code\":\"{{tokenizedCC}}\",\r\n        \"complete\": false,\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment Profile",
			"item": [
				{
					"name": "Create Profile (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"profileId\", jsonData.customer_code);",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\":{  \r\n  \"name\":\"John Doe\",\r\n    \"code\":\"{{tokenizedCC}}\",\r\n  },\r\n  \"billing\": {\r\n      \"name\": \"Jon Doe\",\r\n         \"address_line1\": \"123 Main St.\",\r\n         \"address_line2\": \"\",\r\n         \"city\": \"victoria\",\r\n         \"province\": \"bc\",\r\n         \"country\": \"ca\",\r\n         \"postal_code\": \"V9B3Z4\",\r\n         \"phone_number\": \"25013312345\",\r\n         \"email_address\": \"jon@example.com\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/profiles",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}"
							]
						},
						"description": "Delete a payment profile using the profile ID, also known as the customer code. "
					},
					"response": []
				},
				{
					"name": "Create Profile (raw card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"profileId\", jsonData.customer_code);",
									"}",
									"",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"card\": {\r\n    \"name\": \"Jon Doe\",\r\n    \"number\": \"4030000010001234\",\r\n    \"expiry_month\": \"02\",\r\n    \"expiry_year\": \"18\",\r\n    \"cvd\": \"123\"\r\n  },\r\n  \"billing\": {\r\n      \"name\": \"Jon Doe\",\r\n         \"address_line1\": \"123 Main St.\",\r\n         \"address_line2\": \"\",\r\n         \"city\": \"victoria\",\r\n         \"province\": \"bc\",\r\n         \"country\": \"ca\",\r\n         \"postal_code\": \"V9B3Z4\",\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/profiles",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles"
							]
						},
						"description": "Create a new payment profile using either a card or a single use token. "
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}"
							]
						},
						"description": "Get a payment profile using the profile ID, also known as the Customer Code. "
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"billing\": {\r\n    \"name\": \"New Name\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}"
							]
						},
						"description": "Update profile. "
					},
					"response": []
				},
				{
					"name": "Get Cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"cardId\", jsonData.card[0].card_id);",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}/cards",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}",
								"cards"
							]
						},
						"description": "Get all of the cards on the profile. "
					},
					"response": []
				},
				{
					"name": "Delete Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}/cards/{{cardId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}",
								"cards",
								"{{cardId}}"
							]
						},
						"description": "Delete a card on the profile.     "
					},
					"response": []
				},
				{
					"name": "Add Card (raw card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"card\": {\r\n    \"name\": \"Jon Doe\",\r\n    \"number\": \"4030000010001234\",\r\n    \"expiry_month\": \"02\",\r\n    \"expiry_year\": \"18\",\r\n    \"cvd\": \"123\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}/cards",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}",
								"cards"
							]
						},
						"description": "Add a card to the profile."
					},
					"response": []
				},
				{
					"name": "Add Card (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\":{  \r\n    \"name\":\"John Doe\",\r\n    \"code\":\"{{tokenizedCC}}\"\r\n  }"
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}/cards",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}",
								"cards"
							]
						},
						"description": "Add a card to the profile."
					},
					"response": []
				},
				{
					"name": "Update Card (raw card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"card\": {\r\n    \"name\": \"Jane Doe\",\r\n    \"number\": \"5100000020002000\",\r\n    \"expiry_month\": \"02\",\r\n    \"expiry_year\": \"18\",\r\n    \"cvd\": \"123\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}/cards/{{cardId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}",
								"cards",
								"{{cardId}}"
							]
						},
						"description": "Update the details of a card on the profile. "
					},
					"response": []
				},
				{
					"name": "Update Card (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\":{  \r\n    \"name\":\"John Doe\",\r\n    \"code\":\"{{tokenizedCC}}\"\r\n  }"
						},
						"url": {
							"raw": "{{url}}/v1/profiles/{{profileId}}/cards/{{cardId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles",
								"{{profileId}}",
								"cards",
								"{{cardId}}"
							]
						},
						"description": "Update the details of a card on the profile. "
					},
					"response": []
				},
				{
					"name": "Create Profile (bank account)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJson = xml2Json(responseBody).response;",
									"",
									"tests[\"Payment Profile created\"] = responseJson.responseCode === \"1\";",
									"",
									"if(responseJson.responseCode === \"1\") {",
									"",
									"    // get the recurring account id for Modify",
									"    postman.setEnvironmentVariable(\"profileId\", responseJson.customerCode);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{querystring_url}}/scripts/payment_profile.asp?merchantId={{merchant_id}}&passCode={{profile_passcode}}&serviceVersion=1.0&operationType=N&bankAccountType=CA&bankAccountHolder=John Doe&institutionNumber=123&branchNumber=12345&accountNumber=123456789&ordName=Rosanna+Sylvester&ordEmailAddress=joe@mydomain.com&ordPhoneNumber=2504722326&ordAddress1=123+Main+Street&ordCity=Victoria&ordPostalCode=V8T4M3&ordProvince=BC&ordCountry=CA",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"payment_profile.asp"
							],
							"query": [
								{
									"key": "merchantId",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passCode",
									"value": "{{profile_passcode}}"
								},
								{
									"key": "serviceVersion",
									"value": "1.0"
								},
								{
									"key": "operationType",
									"value": "N"
								},
								{
									"key": "bankAccountType",
									"value": "CA"
								},
								{
									"key": "bankAccountHolder",
									"value": "John Doe"
								},
								{
									"key": "institutionNumber",
									"value": "123"
								},
								{
									"key": "branchNumber",
									"value": "12345"
								},
								{
									"key": "accountNumber",
									"value": "123456789"
								},
								{
									"key": "ordName",
									"value": "Rosanna+Sylvester"
								},
								{
									"key": "ordEmailAddress",
									"value": "joe@mydomain.com"
								},
								{
									"key": "ordPhoneNumber",
									"value": "2504722326"
								},
								{
									"key": "ordAddress1",
									"value": "123+Main+Street"
								},
								{
									"key": "ordCity",
									"value": "Victoria"
								},
								{
									"key": "ordPostalCode",
									"value": "V8T4M3"
								},
								{
									"key": "ordProvince",
									"value": "BC"
								},
								{
									"key": "ordCountry",
									"value": "CA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile (custom profile id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJson = xml2Json(responseBody).response;",
									"",
									"tests[\"Payment Profile created\"] = responseJson.responseCode === \"1\";",
									"",
									"if(responseJson.responseCode === \"1\") {",
									"",
									"    // get the recurring account id for Modify",
									"    postman.setEnvironmentVariable(\"profileId\", responseJson.customerCode);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{querystring_url}}/scripts/payment_profile.asp?merchantId={{merchant_id}}&passCode={{profile_passcode}}&serviceVersion=1.0&operationType=N&customerCode=maryfromaccounting",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"payment_profile.asp"
							],
							"query": [
								{
									"key": "merchantId",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passCode",
									"value": "{{profile_passcode}}"
								},
								{
									"key": "serviceVersion",
									"value": "1.0"
								},
								{
									"key": "operationType",
									"value": "N"
								},
								{
									"key": "customerCode",
									"value": "maryfromaccounting"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile (token with card varification flag)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJson = xml2Json(responseBody).response;",
									"",
									"tests[\"Payment Profile created\"] = responseJson.responseCode === \"1\";",
									"",
									"if(responseJson.responseCode === \"1\") {",
									"",
									"    // get the recurring account id for Modify",
									"    postman.setEnvironmentVariable(\"profileId\", responseJson.customerCode);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/scripts/payment_profile.asp?merchantId={{merchant_id}}&passCode={{profile_passcode}}&serviceVersion=1.0&operationType=N&trnCardOwner=Rosanna+Sylvester&ordAddress1=1407+Graymalkin+Lane&ordPostalCode=111111&singleUseToken={{tokenizedCC}}&cardValidation=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"scripts",
								"payment_profile.asp"
							],
							"query": [
								{
									"key": "merchantId",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passCode",
									"value": "{{profile_passcode}}"
								},
								{
									"key": "serviceVersion",
									"value": "1.0"
								},
								{
									"key": "operationType",
									"value": "N"
								},
								{
									"key": "bankAccountType",
									"value": "CA",
									"disabled": true
								},
								{
									"key": "bankAccountHolder",
									"value": "John Doe",
									"disabled": true
								},
								{
									"key": "institutionNumber",
									"value": "123",
									"disabled": true
								},
								{
									"key": "branchNumber",
									"value": "12345",
									"disabled": true
								},
								{
									"key": "accountNumber",
									"value": "123456789",
									"disabled": true
								},
								{
									"key": "trnCardOwner",
									"value": "Rosanna+Sylvester"
								},
								{
									"key": "ordEmailAddress",
									"value": "joe@mydomain.com",
									"disabled": true
								},
								{
									"key": "ordPhoneNumber",
									"value": "2504722326",
									"disabled": true
								},
								{
									"key": "ordAddress1",
									"value": "1407+Graymalkin+Lane"
								},
								{
									"key": "ordCity",
									"value": "Victoria",
									"disabled": true
								},
								{
									"key": "ordPostalCode",
									"value": "111111"
								},
								{
									"key": "ordProvince",
									"value": "BC",
									"disabled": true
								},
								{
									"key": "ordCountry",
									"value": "CA",
									"disabled": true
								},
								{
									"key": "singleUseToken",
									"value": "{{tokenizedCC}}"
								},
								{
									"key": "cardValidation",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile  (token with partner auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) { ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"profileId\", jsonData.customer_code);",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"partner_id\"] + \":\" + environment[\"partner_profile_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Sub-Merchant-Id",
								"value": "{{merchant_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\":{  \r\n  \"name\":\"John Doe\",\r\n    \"code\":\"{{tokenizedCC}}\",\r\n  },\r\n  \"billing\": {\r\n      \"name\": \"Jon Doe\",\r\n         \"address_line1\": \"123 Main St.\",\r\n         \"address_line2\": \"\",\r\n         \"city\": \"victoria\",\r\n         \"province\": \"bc\",\r\n         \"country\": \"ca\",\r\n         \"postal_code\": \"V9B3Z4\",\r\n         \"phone_number\": \"25013312345\",\r\n         \"email_address\": \"jon@example.com\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/profiles",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"profiles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recurring Payment",
			"item": [
				{
					"name": "Modify recurring account",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Body matches string\"] = responseBody.has(\"Request successful\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/recurring_billing.asp?serviceVersion=1.0&operationType=M&merchantId={{merchant_id}}&passCode={{recurring_passcode}}&rbAccountId={{recurringAccountId}}&amount=12.00",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"recurring_billing.asp"
							],
							"query": [
								{
									"key": "serviceVersion",
									"value": "1.0"
								},
								{
									"key": "operationType",
									"value": "M"
								},
								{
									"key": "merchantId",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passCode",
									"value": "{{recurring_passcode}}"
								},
								{
									"key": "rbAccountId",
									"value": "{{recurringAccountId}}"
								},
								{
									"key": "amount",
									"value": "12.00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring account (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// http://stackoverflow.com/questions/2090551/parse-query-string-in-javascript",
									"// to get the accountId so it can be modified",
									"function getQueryVariable(response, variable) {",
									"    var vars = response.split('&');",
									"    for (var i = 0; i < vars.length; i++) {",
									"        var pair = vars[i].split('=');",
									"        if (decodeURIComponent(pair[0]) == variable) {",
									"            return decodeURIComponent(pair[1]);",
									"        }",
									"    }",
									"    console.log('Query variable %s not found', variable);",
									"    return \"\";",
									"}",
									"",
									"tests[\"Account creation approved\"] = responseBody.has(\"trnApproved=1\");",
									"",
									"if(responseBody.has(\"trnApproved=1\")) {",
									"",
									"    // get the recurring account id for Modify",
									"    postman.setEnvironmentVariable(\"recurringAccountId\", getQueryVariable(responseBody, \"rbAccountId\"));",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{querystring_url}}/scripts/process_transaction.asp?requestType=BACKEND&merchant_Id={{merchant_id}}&passcode={{payment_passcode}}&trnType=P&singleUseToken={{tokenizedCC}}&ordName=Rosanna+Sylvester&ordEmailAddress=joe@mydomain.com&ordAddress1=123+Main+Street&ordAddress2=Suite+202&ordCity=Victoria&ordProvince=BC&ordCountry=CA&ordPostalCode=V8T+4M3&ordPhoneNumber=2504722326&trnAmount=10&trnRecurring=1&rbBillingPeriod=D&rbBillingIncrement=30&trnCardOwner=Rosanna+Sylvester",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"process_transaction.asp"
							],
							"query": [
								{
									"key": "requestType",
									"value": "BACKEND"
								},
								{
									"key": "merchant_Id",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passcode",
									"value": "{{payment_passcode}}"
								},
								{
									"key": "trnType",
									"value": "P"
								},
								{
									"key": "singleUseToken",
									"value": "{{tokenizedCC}}"
								},
								{
									"key": "ordName",
									"value": "Rosanna+Sylvester"
								},
								{
									"key": "ordEmailAddress",
									"value": "joe@mydomain.com"
								},
								{
									"key": "ordAddress1",
									"value": "123+Main+Street"
								},
								{
									"key": "ordAddress2",
									"value": "Suite+202"
								},
								{
									"key": "ordCity",
									"value": "Victoria"
								},
								{
									"key": "ordProvince",
									"value": "BC"
								},
								{
									"key": "ordCountry",
									"value": "CA"
								},
								{
									"key": "ordPostalCode",
									"value": "V8T+4M3"
								},
								{
									"key": "ordPhoneNumber",
									"value": "2504722326"
								},
								{
									"key": "trnAmount",
									"value": "10"
								},
								{
									"key": "trnRecurring",
									"value": "1"
								},
								{
									"key": "rbBillingPeriod",
									"value": "D"
								},
								{
									"key": "rbBillingIncrement",
									"value": "30"
								},
								{
									"key": "trnCardOwner",
									"value": "Rosanna+Sylvester"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring account (profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// http://stackoverflow.com/questions/2090551/parse-query-string-in-javascript",
									"// to get the accountId so it can be modified",
									"function getQueryVariable(response, variable) {",
									"    var vars = response.split('&');",
									"    for (var i = 0; i < vars.length; i++) {",
									"        var pair = vars[i].split('=');",
									"        if (decodeURIComponent(pair[0]) == variable) {",
									"            return decodeURIComponent(pair[1]);",
									"        }",
									"    }",
									"    console.log('Query variable %s not found', variable);",
									"    return \"\";",
									"}",
									"",
									"tests[\"Account creation approved\"] = responseBody.has(\"trnApproved=1\");",
									"",
									"if(responseBody.has(\"trnApproved=1\")) {",
									"",
									"    // get the recurring account id for Modify",
									"    postman.setEnvironmentVariable(\"recurringAccountId\", getQueryVariable(responseBody, \"rbAccountId\"));",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{querystring_url}}/scripts/process_transaction.asp?requestType=BACKEND&merchant_Id={{merchant_id}}&passcode={{payment_passcode}}&trnType=P&customerCode={{profileId}}&trnAmount=10&trnRecurring=1&rbBillingPeriod=D&rbBillingIncrement=30",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"process_transaction.asp"
							],
							"query": [
								{
									"key": "requestType",
									"value": "BACKEND"
								},
								{
									"key": "merchant_Id",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passcode",
									"value": "{{payment_passcode}}"
								},
								{
									"key": "trnType",
									"value": "P"
								},
								{
									"key": "customerCode",
									"value": "{{profileId}}"
								},
								{
									"key": "trnAmount",
									"value": "10"
								},
								{
									"key": "trnRecurring",
									"value": "1"
								},
								{
									"key": "rbBillingPeriod",
									"value": "D"
								},
								{
									"key": "rbBillingIncrement",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Close recurring account",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Body matches string\"] = responseBody.has(\"Request successful\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{querystring_url}}/scripts/recurring_billing.asp?serviceVersion=1.0&operationType=C&merchantId={{merchant_id}}&passCode={{recurring_passcode}}&rbAccountId={{recurringAccountId}}",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"recurring_billing.asp"
							],
							"query": [
								{
									"key": "serviceVersion",
									"value": "1.0"
								},
								{
									"key": "operationType",
									"value": "C"
								},
								{
									"key": "merchantId",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passCode",
									"value": "{{recurring_passcode}}"
								},
								{
									"key": "rbAccountId",
									"value": "{{recurringAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recurring account (token) copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// http://stackoverflow.com/questions/2090551/parse-query-string-in-javascript",
									"// to get the accountId so it can be modified",
									"function getQueryVariable(response, variable) {",
									"    var vars = response.split('&');",
									"    for (var i = 0; i < vars.length; i++) {",
									"        var pair = vars[i].split('=');",
									"        if (decodeURIComponent(pair[0]) == variable) {",
									"            return decodeURIComponent(pair[1]);",
									"        }",
									"    }",
									"    console.log('Query variable %s not found', variable);",
									"    return \"\";",
									"}",
									"",
									"tests[\"Account creation approved\"] = responseBody.has(\"trnApproved=1\");",
									"",
									"if(responseBody.has(\"trnApproved=1\")) {",
									"",
									"    // get the recurring account id for Modify",
									"    postman.setEnvironmentVariable(\"recurringAccountId\", getQueryVariable(responseBody, \"rbAccountId\"));",
									"}",
									"",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{querystring_url}}/scripts/process_transaction.asp?requestType=BACKEND&merchant_Id={{merchant_id}}&passcode={{payment_passcode}}&trnType=P&singleUseToken={{tokenizedCC}}&ordName=Rosanna+Sylvester&ordEmailAddress=joe@mydomain.com&ordAddress1=123+Main+Street&ordAddress2=Suite+202&ordCity=Victoria&ordProvince=BC&ordCountry=CA&ordPostalCode=V8T+4M3&ordPhoneNumber=2504722326&trnAmount=10&trnRecurring=1&rbBillingPeriod=D&rbBillingIncrement=30&trnCardOwner=Rosanna+Sylvester&trnOrderNumber={{currentOrderNumber}}-1,",
							"host": [
								"{{querystring_url}}"
							],
							"path": [
								"scripts",
								"process_transaction.asp"
							],
							"query": [
								{
									"key": "requestType",
									"value": "BACKEND"
								},
								{
									"key": "merchant_Id",
									"value": "{{merchant_id}}"
								},
								{
									"key": "passcode",
									"value": "{{payment_passcode}}"
								},
								{
									"key": "trnType",
									"value": "P"
								},
								{
									"key": "singleUseToken",
									"value": "{{tokenizedCC}}"
								},
								{
									"key": "ordName",
									"value": "Rosanna+Sylvester"
								},
								{
									"key": "ordEmailAddress",
									"value": "joe@mydomain.com"
								},
								{
									"key": "ordAddress1",
									"value": "123+Main+Street"
								},
								{
									"key": "ordAddress2",
									"value": "Suite+202"
								},
								{
									"key": "ordCity",
									"value": "Victoria"
								},
								{
									"key": "ordProvince",
									"value": "BC"
								},
								{
									"key": "ordCountry",
									"value": "CA"
								},
								{
									"key": "ordPostalCode",
									"value": "V8T+4M3"
								},
								{
									"key": "ordPhoneNumber",
									"value": "2504722326"
								},
								{
									"key": "trnAmount",
									"value": "10"
								},
								{
									"key": "trnRecurring",
									"value": "1"
								},
								{
									"key": "rbBillingPeriod",
									"value": "D"
								},
								{
									"key": "rbBillingIncrement",
									"value": "30"
								},
								{
									"key": "trnCardOwner",
									"value": "Rosanna+Sylvester"
								},
								{
									"key": "trnOrderNumber",
									"value": "{{currentOrderNumber}}-1,"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "Search Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"reporting_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Search\",\r\n    \"start_date\": \"2017-01-01T01:01:03\",\r\n    \"end_date\": \"2018-06-05T16:05:00\",   \r\n    \"start_row\": \"1\",\r\n    \"end_row\": \"1\",\r\n    \"criteria\": [\r\n      {\r\n        \"field\": \"1\",\r\n          \"operator\": \"%3D\",\r\n          \"value\": \"{{transId}}\"\r\n      }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/reports",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"reports"
							]
						},
						"description": "Query for transactions using a date range and optional search criteria. "
					},
					"response": []
				},
				{
					"name": "Search Query (minimal)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"reporting_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TransHistoryMinimal\",\r\n    \"start_date\": \"2017-01-01T01:01:03\",\r\n    \"end_date\": \"2018-06-05T16:05:00\",   \r\n    \"start_row\": \"1\",\r\n    \"end_row\": \"2\",\r\n    \"criteria\": [\r\n      {\r\n        \"field\": \"1\",\r\n          \"operator\": \"%3D\",\r\n          \"value\": \"10000105\"\r\n      }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/reports",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"reports"
							]
						},
						"description": "Query for transactions using a date range and optional search criteria. "
					},
					"response": []
				},
				{
					"name": "Search Query copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"reporting_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Search\",\r\n    \"start_date\": \"2017-07-01T01:01:03\",\r\n    \"end_date\": \"2017-07-30T16:05:00\",   \r\n    \"start_row\": \"1\",\r\n    \"end_row\": \"2\",\r\n    \"criteria\": [\r\n      {\r\n        \"field\": \"10\",\r\n          \"operator\": \"%3D\",\r\n          \"value\": \"1\"\r\n      }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/v1/reports",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"reports"
							]
						},
						"description": "Query for transactions using a date range and optional search criteria. "
					},
					"response": []
				},
				{
					"name": "Settlement Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"reporting_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/v1/reports/settlement?start_date=2020-10-01&end_date=2020-10-30",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"reports",
								"settlement"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2020-10-01"
								},
								{
									"key": "end_date",
									"value": "2020-10-30"
								}
							]
						},
						"description": "This report provides credit card settlement and fee information. It is helpful to understand the credit date, amount, and fees of each settlement. You can retrieve settlement data with up to a three-month range."
					},
					"response": []
				},
				{
					"name": "Generate Report - BatchFile copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<request>\r\n<rptVersion>1.0</rptVersion>\r\n<serviceName>BatchFile</serviceName>\r\n<merchantId>{{merchant_id}}</merchantId>\r\n<passCode>{{reporting_passcode}}</passCode>\r\n<rptFormat>JSON</rptFormat>\r\n</request>"
						},
						"url": {
							"raw": "{{url}}/scripts/reporting/report.aspx",
							"host": [
								"{{url}}"
							],
							"path": [
								"scripts",
								"reporting",
								"report.aspx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Processor Tokenization",
			"item": [
				{
					"name": "Make Payment (raw card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    // get payment token: ",
									"    postman.setEnvironmentVariable(\"payment_token\", jsonData.card.processor_token.payment_token);",
									"",
									"    // get reporting token: ",
									"    postman.setEnvironmentVariable(\"reporting_token\", jsonData.card.processor_token.reporting_token);",
									"",
									"    // transaction id used for refund: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 100.00,\r\n    \"payment_method\":\"card\",\r\n    \"customer_ip\": \"123.123.123.123\",\r\n    \"term_url\":\"https://test01-web.na.bambora.com\",\r\n    \"billing\":{\r\n        \"name\": \"Test User\",\r\n        \"address_line1\": \"1755 W. BROADWAY SUITE 105\",\r\n        \"address_line2\": \"\",\r\n        \"city\": \"Victoria\",\r\n        \"province\": \"BC\",\r\n        \"country\": \"CA\",\r\n        \"postal_code\": \"J0L1T0\",\r\n        \"phone_number\": \"1234567890\",\r\n        \"email_address\": \"tester@test.com\"\r\n    },\r\n    \"card\":{\r\n        \"name\":\"John Doe\",\r\n        \"number\":\"4030000010001234\",\r\n        \"expiry_month\":\"02\",\r\n        \"expiry_year\":\"27\",\r\n        \"cvd\":\"123\",\r\n        \"3d_secure\": {\r\n            \"browser\": {\r\n            \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\r\n            \"java_enabled\": \"false\",\r\n            \"language\": \"en-US\",\r\n            \"color_depth\": \"24\",\r\n            \"screen_height\": 1080,\r\n            \"screen_width\": 1920,\r\n            \"time_zone\": -120,\r\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\r\n            \"Javascript_enabled\": true\r\n            },\r\n            \"enabled\": true,\r\n            \"version\": 2,\r\n            \"auth_required\": false\r\n        }\r\n\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Payment (processor token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    // transaction id used for refund: ",
									"    postman.setEnvironmentVariable(\"transId\", jsonData.id);",
									"    ",
									"    // increment order num to keep unique: ",
									"    postman.setEnvironmentVariable(\"currentOrderNumber\", parseInt(jsonData.order_number)+1);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"payment_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": 100.00,\r\n  \"payment_method\":\"processor_token\",\r\n  \"processor_token\":{\r\n    \"name\":\"John Doe\",\r\n    \"payment_token\":\"{{payment_token}}\",\r\n    \"expiry_month\":\"02\",\r\n    \"expiry_year\":\"14\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/payments",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Query (payment token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"reporting_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Search\",\r\n    \"start_date\": \"2023-01-01T01:01:03\",\r\n    \"end_date\": \"2023-06-05T16:05:00\",   \r\n    \"start_row\": \"1\",\r\n    \"end_row\": \"1\",\r\n    \"criteria\": [\r\n      {\r\n        \"field\": \"26\",\r\n        \"operator\": \"%3D\",\r\n        \"value\": \"{{payment_token}}\"\r\n      }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/reports",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"reports"
							]
						},
						"description": "Query for transactions using a date range and optional search criteria. "
					},
					"response": []
				},
				{
					"name": "Search Query (reporting token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.clearEnvironmentVariable(\"passcode_encoded\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var passcode_encoded = btoa(environment[\"merchant_id\"] + \":\" + environment[\"reporting_passcode\"]);",
									"postman.setEnvironmentVariable(\"passcode_encoded\", passcode_encoded);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Passcode {{passcode_encoded}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Search\",\r\n    \"start_date\": \"2023-01-01T01:01:03\",\r\n    \"end_date\": \"2023-06-05T16:05:00\",   \r\n    \"start_row\": \"1\",\r\n    \"end_row\": \"1\",\r\n    \"criteria\": [\r\n      {\r\n        \"field\": \"27\",\r\n        \"operator\": \"%3D\",\r\n        \"value\": \"{{reporting_token}}\"\r\n      }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/v1/reports",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"reports"
							]
						},
						"description": "Query for transactions using a date range and optional search criteria. "
					},
					"response": []
				}
			]
		},
		{
			"name": "Token",
			"item": [
				{
					"name": "Tokenize Credit Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"tokenizedCC\", jsonData.token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"number\":\"4012000033330026\",\r\n  \"expiry_month\":\"06\",\r\n  \"expiry_year\":\"25\",\r\n  \"cvd\":\"123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/scripts/tokenization/tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"scripts",
								"tokenization",
								"tokens"
							]
						},
						"description": "Turn a credit card into a token using this service."
					},
					"response": []
				}
			]
		}
	]
}